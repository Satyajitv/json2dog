#!/usr/bin/perl

use strict;
use warnings;

use Data::Dumper;
use LWP::Simple qw(get);
use JSON;

use DataDog::DogStatsd;

# options
my $debug = $ENV{JSON2DOG_DEBUG} || 0;
my $delay = 60; # seconds
my $use_curl = 0; # true if curl is better than LWP::Simple
#$use_curl = 1 if -e '/etc/redhat-release';
#print "use_curl = $use_curl\n";

# read command line arguments
my ($health_url,$statsd_base) = @ARGV;

# defaults
unless (defined $health_url) {
	$health_url = 'https://jsonplaceholder.typicode.com/posts/1';
	error("checking $health_url");
}

unless (defined $statsd_base) {
	$statsd_base = 'test.json';
	error("defaulting stats_base to '$statsd_base'.");
}

# instances of handy objects
my $dogstatsd = DataDog::DogStatsd->new;
$dogstatsd->{port} = find_port();
my $json = JSON->new->allow_nonref;

# keep pulling stats until we get killed
while (1) {
	my $raw_html = http_get($health_url);

	unless (defined $raw_html and length $raw_html) {
		my $sleep_time = int(rand(30));
		error("no data back from $health_url, sleeping for $sleep_time seconds");
		sleep($sleep_time);
		next; # try again
	}

	my $health_resp = $json->decode($raw_html);
	error(Dumper($health_resp)) if $debug > 1;

	foreach my $key (keys %$health_resp) {
		my $value = $health_resp->{$key};
		if ($value =~ /^[0-9.]+$/) { # only numbers
			my $metric_label = $statsd_base . '.' . $key;
			error("$metric_label -> $value") if $debug;
			$dogstatsd->gauge( $metric_label, $value);
		}
	}

	error("") if $debug;
	sleep($delay-1); # TODO: more elegant calculation of how long it took to do one iteration
}

sub http_get {
	my ($url) = @_;

	my $raw;
	if ($use_curl) {
		$raw = get($url); # LWP::Simple
	} else {
		$raw = curl($url);
	}

	#print "$raw\n";
	return $raw;
}

sub curl {
	my ($url) = @_;
	my $output = `curl -s $url`;
	return $output;
}

sub find_port {
	my @possible_ports = qw(8125 1025);

	if ( defined $ENV{DOGSTATSD_PORT} ) {
		unshift(@possible_ports, $ENV{DOGSTATSD_PORT});
	}

	foreach my $port (@possible_ports) {
		my $output = `netstat -na | grep :$port`;
		if (length($output)) {
			error("talking to port $port");
			return $port;
		}
	}

	error("ERROR: no dogstatsd port to talk to");
	die;
}

sub error {
	my ($log_message) = @_;

	my $now = gmtime(time);
	my $hostname = 'localhost:';
	if (defined $ENV{HOSTNAME}) {
		$hostname = $ENV{HOSTNAME} . ':';
	}

	print "$now $hostname $log_message\n";
}
